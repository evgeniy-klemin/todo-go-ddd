// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// ErrBadParams defines model for ErrBadParams.
type ErrBadParams struct {
	Fields *[]struct {
		Field   *string `json:"field,omitempty"`
		Message *string `json:"message,omitempty"`
	} `json:"fields,omitempty"`
	Message *string `json:"message,omitempty"`
}

// ItemPatch defines model for ItemPatch.
type ItemPatch struct {
	Done     *bool   `json:"done,omitempty"`
	Name     *string `json:"name,omitempty"`
	Position *int    `json:"position,omitempty"`
}

// ItemPost defines model for ItemPost.
type ItemPost struct {
	Name     string `json:"name"`
	Position *int   `json:"position,omitempty"`
}

// Todo item
type ItemResponse struct {
	// The date that the item was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Done flag
	Done *bool `json:"done,omitempty"`

	// Unique identifier for the given item.
	Id   string  `json:"id"`
	Name *string `json:"name,omitempty"`

	// Position for sort
	Position *int `json:"position,omitempty"`
}

// Todo items
type ItemsResponse []ItemResponse

// Page defines model for _page.
type Page int

// PerPage defines model for _per_page.
type PerPage int

// ItemId defines model for item_id.
type ItemId string

// GetItemsJSONBody defines parameters for GetItems.
type GetItemsJSONBody map[string]interface{}

// GetItemsParams defines parameters for GetItems.
type GetItemsParams struct {
	// Count items per page
	PerPage *PerPage `json:"_per_page,omitempty"`

	// Page number
	Page *Page `json:"_page,omitempty"`

	// Sort by fields
	Sort *string `json:"_sort,omitempty"`

	// Retrieve certain fields
	Fields *string `json:"_fields,omitempty"`

	// Filter by done
	Done *bool `json:"done,omitempty"`
}

// PostItemsJSONBody defines parameters for PostItems.
type PostItemsJSONBody ItemPost

// PatchItemsItemidJSONBody defines parameters for PatchItemsItemid.
type PatchItemsItemidJSONBody ItemPatch

// GetItemsJSONRequestBody defines body for GetItems for application/json ContentType.
type GetItemsJSONRequestBody GetItemsJSONBody

// PostItemsJSONRequestBody defines body for PostItems for application/json ContentType.
type PostItemsJSONRequestBody PostItemsJSONBody

// PatchItemsItemidJSONRequestBody defines body for PatchItemsItemid for application/json ContentType.
type PatchItemsItemidJSONRequestBody PatchItemsItemidJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetItems request with any body
	GetItemsWithBody(ctx context.Context, params *GetItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetItems(ctx context.Context, params *GetItemsParams, body GetItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostItems request with any body
	PostItemsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostItems(ctx context.Context, body PostItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetItemsItemId request
	GetItemsItemId(ctx context.Context, itemId ItemId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchItemsItemid request with any body
	PatchItemsItemidWithBody(ctx context.Context, itemId ItemId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchItemsItemid(ctx context.Context, itemId ItemId, body PatchItemsItemidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetItemsWithBody(ctx context.Context, params *GetItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetItemsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetItems(ctx context.Context, params *GetItemsParams, body GetItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetItemsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostItemsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostItemsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostItems(ctx context.Context, body PostItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostItemsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetItemsItemId(ctx context.Context, itemId ItemId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetItemsItemIdRequest(c.Server, itemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchItemsItemidWithBody(ctx context.Context, itemId ItemId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchItemsItemidRequestWithBody(c.Server, itemId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchItemsItemid(ctx context.Context, itemId ItemId, body PatchItemsItemidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchItemsItemidRequest(c.Server, itemId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetItemsRequest calls the generic GetItems builder with application/json body
func NewGetItemsRequest(server string, params *GetItemsParams, body GetItemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetItemsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetItemsRequestWithBody generates requests for GetItems with any type of body
func NewGetItemsRequestWithBody(server string, params *GetItemsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Done != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "done", runtime.ParamLocationQuery, *params.Done); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostItemsRequest calls the generic PostItems builder with application/json body
func NewPostItemsRequest(server string, body PostItemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostItemsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostItemsRequestWithBody generates requests for PostItems with any type of body
func NewPostItemsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetItemsItemIdRequest generates requests for GetItemsItemId
func NewGetItemsItemIdRequest(server string, itemId ItemId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "item_id", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchItemsItemidRequest calls the generic PatchItemsItemid builder with application/json body
func NewPatchItemsItemidRequest(server string, itemId ItemId, body PatchItemsItemidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchItemsItemidRequestWithBody(server, itemId, "application/json", bodyReader)
}

// NewPatchItemsItemidRequestWithBody generates requests for PatchItemsItemid with any type of body
func NewPatchItemsItemidRequestWithBody(server string, itemId ItemId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "item_id", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetItems request with any body
	GetItemsWithBodyWithResponse(ctx context.Context, params *GetItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetItemsResponse, error)

	GetItemsWithResponse(ctx context.Context, params *GetItemsParams, body GetItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetItemsResponse, error)

	// PostItems request with any body
	PostItemsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostItemsResponse, error)

	PostItemsWithResponse(ctx context.Context, body PostItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostItemsResponse, error)

	// GetItemsItemId request
	GetItemsItemIdWithResponse(ctx context.Context, itemId ItemId, reqEditors ...RequestEditorFn) (*GetItemsItemIdResponse, error)

	// PatchItemsItemid request with any body
	PatchItemsItemidWithBodyWithResponse(ctx context.Context, itemId ItemId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchItemsItemidResponse, error)

	PatchItemsItemidWithResponse(ctx context.Context, itemId ItemId, body PatchItemsItemidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchItemsItemidResponse, error)
}

type GetItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ItemsResponse
}

// Status returns HTTPResponse.Status
func (r GetItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ItemResponse
	JSON400      *ErrBadParams
}

// Status returns HTTPResponse.Status
func (r PostItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetItemsItemIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ItemResponse
}

// Status returns HTTPResponse.Status
func (r GetItemsItemIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetItemsItemIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchItemsItemidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ItemResponse
}

// Status returns HTTPResponse.Status
func (r PatchItemsItemidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchItemsItemidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetItemsWithBodyWithResponse request with arbitrary body returning *GetItemsResponse
func (c *ClientWithResponses) GetItemsWithBodyWithResponse(ctx context.Context, params *GetItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetItemsResponse, error) {
	rsp, err := c.GetItemsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetItemsResponse(rsp)
}

func (c *ClientWithResponses) GetItemsWithResponse(ctx context.Context, params *GetItemsParams, body GetItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetItemsResponse, error) {
	rsp, err := c.GetItems(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetItemsResponse(rsp)
}

// PostItemsWithBodyWithResponse request with arbitrary body returning *PostItemsResponse
func (c *ClientWithResponses) PostItemsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostItemsResponse, error) {
	rsp, err := c.PostItemsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostItemsResponse(rsp)
}

func (c *ClientWithResponses) PostItemsWithResponse(ctx context.Context, body PostItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostItemsResponse, error) {
	rsp, err := c.PostItems(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostItemsResponse(rsp)
}

// GetItemsItemIdWithResponse request returning *GetItemsItemIdResponse
func (c *ClientWithResponses) GetItemsItemIdWithResponse(ctx context.Context, itemId ItemId, reqEditors ...RequestEditorFn) (*GetItemsItemIdResponse, error) {
	rsp, err := c.GetItemsItemId(ctx, itemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetItemsItemIdResponse(rsp)
}

// PatchItemsItemidWithBodyWithResponse request with arbitrary body returning *PatchItemsItemidResponse
func (c *ClientWithResponses) PatchItemsItemidWithBodyWithResponse(ctx context.Context, itemId ItemId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchItemsItemidResponse, error) {
	rsp, err := c.PatchItemsItemidWithBody(ctx, itemId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchItemsItemidResponse(rsp)
}

func (c *ClientWithResponses) PatchItemsItemidWithResponse(ctx context.Context, itemId ItemId, body PatchItemsItemidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchItemsItemidResponse, error) {
	rsp, err := c.PatchItemsItemid(ctx, itemId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchItemsItemidResponse(rsp)
}

// ParseGetItemsResponse parses an HTTP response from a GetItemsWithResponse call
func ParseGetItemsResponse(rsp *http.Response) (*GetItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ItemsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostItemsResponse parses an HTTP response from a PostItemsWithResponse call
func ParsePostItemsResponse(rsp *http.Response) (*PostItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrBadParams
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetItemsItemIdResponse parses an HTTP response from a GetItemsItemIdWithResponse call
func ParseGetItemsItemIdResponse(rsp *http.Response) (*GetItemsItemIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetItemsItemIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchItemsItemidResponse parses an HTTP response from a PatchItemsItemidWithResponse call
func ParsePatchItemsItemidResponse(rsp *http.Response) (*PatchItemsItemidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PatchItemsItemidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
